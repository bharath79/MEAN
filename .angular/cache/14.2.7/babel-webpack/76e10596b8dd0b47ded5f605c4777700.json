{"ast":null,"code":"import { FormControl, FormGroup, Validators } from '@angular/forms';\nimport { mimeType } from './mime-type.validator';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../posts.service\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"@angular/common\";\nimport * as i4 from \"@angular/forms\";\nimport * as i5 from \"@angular/material/form-field\";\nimport * as i6 from \"@angular/material/input\";\nimport * as i7 from \"@angular/material/card\";\nimport * as i8 from \"@angular/material/button\";\nimport * as i9 from \"@angular/material/progress-spinner\";\n\nfunction PostCreateComponent_mat_spinner_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"mat-spinner\");\n  }\n}\n\nfunction PostCreateComponent_form_2_mat_error_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-error\");\n    i0.ɵɵtext(1, \"Enter Title\");\n    i0.ɵɵelementEnd();\n  }\n}\n\nfunction PostCreateComponent_form_2_mat_error_6_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-error\");\n    i0.ɵɵtext(1, \"Enter Title\");\n    i0.ɵɵelementEnd();\n  }\n}\n\nfunction PostCreateComponent_form_2_div_12_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 10);\n    i0.ɵɵelement(1, \"img\", 11);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r5 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"src\", ctx_r5.imagePreview, i0.ɵɵsanitizeUrl)(\"alt\", ctx_r5.form.value.title);\n  }\n}\n\nfunction PostCreateComponent_form_2_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r7 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"form\", 2);\n    i0.ɵɵlistener(\"submit\", function PostCreateComponent_form_2_Template_form_submit_0_listener() {\n      i0.ɵɵrestoreView(_r7);\n      const ctx_r6 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r6.onSave());\n    });\n    i0.ɵɵelementStart(1, \"mat-form-field\");\n    i0.ɵɵelement(2, \"input\", 3);\n    i0.ɵɵtemplate(3, PostCreateComponent_form_2_mat_error_3_Template, 2, 0, \"mat-error\", 0);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(4, \"mat-form-field\");\n    i0.ɵɵelement(5, \"textarea\", 4);\n    i0.ɵɵtemplate(6, PostCreateComponent_form_2_mat_error_6_Template, 2, 0, \"mat-error\", 0);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(7, \"div\")(8, \"button\", 5);\n    i0.ɵɵlistener(\"click\", function PostCreateComponent_form_2_Template_button_click_8_listener() {\n      i0.ɵɵrestoreView(_r7);\n\n      const _r4 = i0.ɵɵreference(11);\n\n      return i0.ɵɵresetView(_r4.click());\n    });\n    i0.ɵɵtext(9, \" Pick Image \");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(10, \"input\", 6, 7);\n    i0.ɵɵlistener(\"change\", function PostCreateComponent_form_2_Template_input_change_10_listener($event) {\n      i0.ɵɵrestoreView(_r7);\n      const ctx_r9 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r9.onImagePicked($event));\n    });\n    i0.ɵɵelementEnd()();\n    i0.ɵɵtemplate(12, PostCreateComponent_form_2_div_12_Template, 2, 2, \"div\", 8);\n    i0.ɵɵelementStart(13, \"button\", 9);\n    i0.ɵɵtext(14, \"Save\");\n    i0.ɵɵelementEnd()();\n  }\n\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"formGroup\", ctx_r1.form);\n    i0.ɵɵadvance(3);\n    i0.ɵɵproperty(\"ngIf\", ctx_r1.form.get(\"title\").invalid);\n    i0.ɵɵadvance(3);\n    i0.ɵɵproperty(\"ngIf\", ctx_r1.form.get(\"content\").invalid);\n    i0.ɵɵadvance(6);\n    i0.ɵɵproperty(\"ngIf\", ctx_r1.imagePreview !== \"\" && ctx_r1.imagePreview && ctx_r1.form.get(\"image\").valid);\n  }\n}\n\nexport class PostCreateComponent {\n  constructor(postsService, route) {\n    this.postsService = postsService;\n    this.route = route;\n    this.k = '';\n    this.v = '';\n    this.isLoading = false;\n    this.mode = 'create';\n  }\n\n  ngOnInit() {\n    this.form = new FormGroup({\n      title: new FormControl(null, {\n        validators: [Validators.required, Validators.minLength(3)]\n      }),\n      content: new FormControl(null, {\n        validators: [Validators.required]\n      }),\n      image: new FormControl(null, {\n        validators: [Validators.required],\n        asyncValidators: [mimeType]\n      })\n    });\n    this.route.paramMap.subscribe(data => {\n      if (data.has('id')) {\n        this.mode = 'edit';\n        this.id = data.get('id');\n        this.isLoading = true;\n        this.postsService.getPost(this.id).subscribe(postData => {\n          this.isLoading = false;\n          this.post = {\n            id: postData._id,\n            title: postData.title,\n            content: postData.content\n          };\n          this.form.setValue({\n            title: this.post.title,\n            content: this.post.content\n          });\n        });\n      } else {\n        this.mode = 'create';\n        this.id = null;\n      }\n    });\n  }\n\n  onImagePicked(event) {\n    const file = event.target.files[0];\n    this.form.patchValue({\n      image: file\n    });\n    this.form.get('image').updateValueAndValidity();\n    const reader = new FileReader();\n\n    reader.onload = () => {\n      this.imagePreview = reader.result.toString();\n    };\n\n    reader.readAsDataURL(file);\n  }\n\n  onSave() {\n    if (this.form.invalid) return;\n    this.isLoading = true;\n\n    if (this.mode === 'create') {\n      this.postsService.setPosts(this.form.value.title, this.form.value.content);\n    } else {\n      this.postsService.updatePost(this.id, this.form.value.title, this.form.value.content);\n    }\n\n    this.form.reset();\n  }\n\n}\n\nPostCreateComponent.ɵfac = function PostCreateComponent_Factory(t) {\n  return new (t || PostCreateComponent)(i0.ɵɵdirectiveInject(i1.PostsService), i0.ɵɵdirectiveInject(i2.ActivatedRoute));\n};\n\nPostCreateComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: PostCreateComponent,\n  selectors: [[\"app-post-create\"]],\n  decls: 3,\n  vars: 2,\n  consts: [[4, \"ngIf\"], [3, \"formGroup\", \"submit\", 4, \"ngIf\"], [3, \"formGroup\", \"submit\"], [\"type\", \"text\", \"matInput\", \"\", \"formControlName\", \"title\", \"placeholder\", \"Title\"], [\"matInput\", \"\", \"rows\", \"10\", \"formControlName\", \"content\", \"placeholder\", \"Content\"], [\"mat-stroked-button\", \"\", \"type\", \"button\", 3, \"click\"], [\"type\", \"file\", 3, \"change\"], [\"filePicker\", \"\"], [\"class\", \"image-preview\", 4, \"ngIf\"], [\"mat-raised-button\", \"\", \"color\", \"primary\", \"type\", \"submit\"], [1, \"image-preview\"], [3, \"src\", \"alt\"]],\n  template: function PostCreateComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"mat-card\");\n      i0.ɵɵtemplate(1, PostCreateComponent_mat_spinner_1_Template, 1, 0, \"mat-spinner\", 0);\n      i0.ɵɵtemplate(2, PostCreateComponent_form_2_Template, 15, 4, \"form\", 1);\n      i0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.isLoading);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", !ctx.isLoading);\n    }\n  },\n  dependencies: [i3.NgIf, i4.ɵNgNoValidate, i4.DefaultValueAccessor, i4.NgControlStatus, i4.NgControlStatusGroup, i4.FormGroupDirective, i4.FormControlName, i5.MatError, i5.MatFormField, i6.MatInput, i7.MatCard, i8.MatButton, i9.MatProgressSpinner],\n  styles: [\"mat-form-field[_ngcontent-%COMP%], textarea[_ngcontent-%COMP%] {\\r\\n  width: 100%;\\r\\n}\\r\\n\\r\\nmat-spinner[_ngcontent-%COMP%] {\\r\\n  margin: auto;\\r\\n}\\r\\n\\r\\ninput[type=\\\"file\\\"][_ngcontent-%COMP%] {\\r\\n  visibility: hidden;\\r\\n}\\r\\n\\r\\n.image-preview[_ngcontent-%COMP%] {\\r\\n  height: 5rem;\\r\\n  margin: 1rem 0;\\r\\n}\\r\\n\\r\\n.image-preview[_ngcontent-%COMP%]   img[_ngcontent-%COMP%] {\\r\\n  height: 100%;\\r\\n}\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInBvc3QtY3JlYXRlLmNvbXBvbmVudC5jc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7O0VBRUUsV0FBVztBQUNiOztBQUVBO0VBQ0UsWUFBWTtBQUNkOztBQUVBO0VBQ0Usa0JBQWtCO0FBQ3BCOztBQUVBO0VBQ0UsWUFBWTtFQUNaLGNBQWM7QUFDaEI7O0FBRUE7RUFDRSxZQUFZO0FBQ2QiLCJmaWxlIjoicG9zdC1jcmVhdGUuY29tcG9uZW50LmNzcyIsInNvdXJjZXNDb250ZW50IjpbIm1hdC1mb3JtLWZpZWxkLFxyXG50ZXh0YXJlYSB7XHJcbiAgd2lkdGg6IDEwMCU7XHJcbn1cclxuXHJcbm1hdC1zcGlubmVyIHtcclxuICBtYXJnaW46IGF1dG87XHJcbn1cclxuXHJcbmlucHV0W3R5cGU9XCJmaWxlXCJdIHtcclxuICB2aXNpYmlsaXR5OiBoaWRkZW47XHJcbn1cclxuXHJcbi5pbWFnZS1wcmV2aWV3IHtcclxuICBoZWlnaHQ6IDVyZW07XHJcbiAgbWFyZ2luOiAxcmVtIDA7XHJcbn1cclxuXHJcbi5pbWFnZS1wcmV2aWV3IGltZyB7XHJcbiAgaGVpZ2h0OiAxMDAlO1xyXG59XHJcbiJdfQ== */\"]\n});","map":{"version":3,"mappings":"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","names":["FormControl","FormGroup","Validators","mimeType","i0","ctx_r5","PostCreateComponent","constructor","postsService","route","ngOnInit","form","title","validators","required","minLength","content","image","asyncValidators","paramMap","subscribe","data","has","mode","id","get","isLoading","getPost","postData","post","_id","setValue","onImagePicked","event","file","target","files","patchValue","updateValueAndValidity","reader","FileReader","onload","imagePreview","result","toString","readAsDataURL","onSave","invalid","setPosts","value","updatePost","reset","selectors","decls","vars","consts","template"],"sourceRoot":"","sources":["C:\\Users\\bhara\\OneDrive\\Desktop\\vinay\\mean\\src\\app\\posts\\post-create\\post-create.component.ts","C:\\Users\\bhara\\OneDrive\\Desktop\\vinay\\mean\\src\\app\\posts\\post-create\\post-create.component.html"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\nimport { ActivatedRoute, ParamMap } from '@angular/router';\nimport { Post } from '../post.model';\nimport { PostsService } from '../posts.service';\nimport { mimeType } from './mime-type.validator';\n\n@Component({\n  selector: 'app-post-create',\n  templateUrl: './post-create.component.html',\n  styleUrls: ['./post-create.component.css'],\n})\nexport class PostCreateComponent implements OnInit {\n  k = '';\n  v = '';\n  isLoading = false;\n  private mode = 'create';\n  private id: string;\n  imagePreview: string;\n  post: Post;\n  form: FormGroup;\n\n  constructor(\n    public postsService: PostsService,\n    public route: ActivatedRoute\n  ) {}\n\n  ngOnInit() {\n    this.form = new FormGroup({\n      title: new FormControl(null, {\n        validators: [Validators.required, Validators.minLength(3)],\n      }),\n      content: new FormControl(null, { validators: [Validators.required] }),\n      image: new FormControl(null, {\n        validators: [Validators.required],\n        asyncValidators: [mimeType],\n      }),\n    });\n    this.route.paramMap.subscribe((data: ParamMap) => {\n      if (data.has('id')) {\n        this.mode = 'edit';\n        this.id = data.get('id');\n        this.isLoading = true;\n        this.postsService.getPost(this.id).subscribe((postData) => {\n          this.isLoading = false;\n          this.post = {\n            id: postData._id,\n            title: postData.title,\n            content: postData.content,\n          };\n          this.form.setValue({\n            title: this.post.title,\n            content: this.post.content,\n          });\n        });\n      } else {\n        this.mode = 'create';\n        this.id = null;\n      }\n    });\n  }\n\n  onImagePicked(event: Event) {\n    const file = (event.target as HTMLInputElement).files[0];\n    this.form.patchValue({ image: file });\n    this.form.get('image').updateValueAndValidity();\n\n    const reader = new FileReader();\n    reader.onload = () => {\n      this.imagePreview = reader.result.toString();\n    };\n    reader.readAsDataURL(file);\n  }\n  onSave() {\n    if (this.form.invalid) return;\n\n    this.isLoading = true;\n    if (this.mode === 'create') {\n      this.postsService.setPosts(\n        this.form.value.title,\n        this.form.value.content,\n        \n      );\n    } else {\n      this.postsService.updatePost(\n        this.id,\n        this.form.value.title,\n        this.form.value.content\n      );\n    }\n\n    this.form.reset();\n  }\n}\n","<mat-card>\n  <mat-spinner *ngIf=\"isLoading\"></mat-spinner>\n  <form [formGroup]=\"form\" (submit)=\"onSave()\" *ngIf=\"!isLoading\">\n    <mat-form-field>\n      <input type=\"text\" matInput formControlName=\"title\" placeholder=\"Title\" />\n      <mat-error *ngIf=\"form.get('title').invalid\">Enter Title</mat-error>\n    </mat-form-field>\n    <mat-form-field>\n      <textarea\n        matInput\n        rows=\"10\"\n        formControlName=\"content\"\n        placeholder=\"Content\"\n      ></textarea>\n      <mat-error *ngIf=\"form.get('content').invalid\">Enter Title</mat-error>\n    </mat-form-field>\n    <div>\n      <button mat-stroked-button type=\"button\" (click)=\"filePicker.click()\">\n        Pick Image\n      </button>\n      <input type=\"file\" #filePicker (change)=\"onImagePicked($event)\" />\n    </div>\n    <div\n      class=\"image-preview\"\n      *ngIf=\"imagePreview !== '' && imagePreview && form.get('image').valid\"\n    >\n      <img [src]=\"imagePreview\" [alt]=\"form.value.title\" />\n    </div>\n    <button mat-raised-button color=\"primary\" type=\"submit\">Save</button>\n  </form>\n</mat-card>\n"]},"metadata":{},"sourceType":"module"}